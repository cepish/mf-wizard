name: "Vercel Deploy"

on:
  push:
    branches:
      - master

env:
  WATCH_PATHS_FILE_NAME: "watch-paths.json"

jobs:
  # First job: figure out which apps have changes and should be deployed
  generate-matrix:
    runs-on: ubuntu-latest
    # output a matrix object (list of apps to deploy)
    outputs:
      matrix: ${{steps.set-matrix.outputs.matrix}}
    steps:
      # Check out the repo so the workflow can access files
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Set up a Node.js environment to run our script
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install pnpm # Required to run pnpm install in the next step
        run: npm install -g pnpm

      - name: Install dependencies # Installs all workspace dependencies, including minimatch (if in root devDeps)
        run: pnpm install --frozen-lockfile

      - name: Determine affected apps
        id: set-matrix
        run: |
          echo "Running resolve-affected-files.js to determine the matrix..."

          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})

          echo "Files changed: $CHANGED_FILES"

          # Execute the Node.js script and capture its JSON output
          # The output should be a single-line JSON string like {"include":[{"app":"docs"},{"app":"main"}]}
          MATRIX_JSON=$(node ./scripts/vercel/resolve-affected-files.js)

          echo "Generated Matrix JSON: $MATRIX_JSON"

          # Write the captured JSON string to the GITHUB_OUTPUT environment file
          # This sets the 'matrix' output for the 'set-matrix' step.
          echo "matrix=$MATRIX_JSON" >> "$GITHUB_OUTPUT"

  # Second job: use the matrix to deploy each changed app
  deploy:
    # this job depends on the matrix generation step
    needs: generate-matrix
    runs-on: ubuntu-latest
    # Only run steps if the matrix has at least one app
    if: ${{ fromJson(needs.generate-matrix.outputs.matrix).include.length > 0 }}

    # define the matrix â€” runs once for each app in the list
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: pnpm

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build app
        run: |
          echo "Building app: ${{ matrix.app }}"
          pnpm turbo run build --filter=${{ matrix.app }}

      - name: Set Vercel token and project ID (Node.js)
        run: node ./scripts/vercel/set-env.js ${{ matrix.app }}
        env:
          # inject this envs for Node.js script
          VERCEL_TOKEN_DOCS_APP: ${{ secrets.VERCEL_TOKEN_DOCS_APP }}
          VERCEL_PROJECT_ID_DOCS_APP: ${{ secrets.VERCEL_PROJECT_ID_DOCS_APP }}
          VERCEL_TOKEN_MAIN_APP: ${{ secrets.VERCEL_TOKEN_MAIN_APP }}
          VERCEL_PROJECT_ID_MAIN_APP: ${{ secrets.VERCEL_PROJECT_ID_MAIN_APP }}

      - name: Install Vercel CLI
        run: npm install -g vercel

      # ðŸš€ Step 2: Deploy the app â€” customize this with your deployment command
      - name: Deploy to Vercel
        run: |
          echo "Deploying app: ${{ matrix.app }}"
          vercel --cwd apps/${{ matrix.app }} \
                --prod \
                --token $VERCEL_TOKEN \
                --project $VERCEL_PROJECT_ID
