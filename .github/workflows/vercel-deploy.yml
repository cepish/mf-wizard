name: "Vercel Deploy"

on:
  push:
    branches:
      - master

env:
  WATCH_PATHS_FILE_NAME: "watch-paths.json"

jobs:
  # First job: figure out which apps have changes and should be deployed
  generate-matrix:
    runs-on: ubuntu-latest
    # output an apps object (list of apps to deploy)
    outputs:
      apps: ${{steps.set-matrix.outputs.apps}}
    steps:
      # Check out the repo so the workflow can access files
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Set up a Node.js environment to run our script
      - name: Setup Node, npm, pnpm
        uses: "./.github/actions/setup-node-pnpm"

      - name: Determine affected apps
        id: set-matrix
        env: # <--- Define environment need for resolve-affected-files.js script
          GITHUB_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_CURRENT_SHA: ${{ github.sha }}
        run: |
          echo "Running resolve-affected-files.js to determine the matrix..."

          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})

          echo "Files changed: $CHANGED_FILES"

          # Execute the Node.js script and capture its JSON output
          # The output should be a single-line JSON string like ["app","docs"]
          MATRIX_JSON=$(node ./scripts/vercel/resolve-affected-files.js)

          echo "Generated Matrix JSON: $MATRIX_JSON"

          # Write the captured JSON string to the GITHUB_OUTPUT environment file
          # This sets the 'matrix' output for the 'set-matrix' step.
          echo "apps=$MATRIX_JSON" >> "$GITHUB_OUTPUT"

  # Second job: use the matrix to deploy each changed app
  deploy:
    # this job depends on the matrix generation step
    needs: generate-matrix
    runs-on: ubuntu-latest
    # Only run steps if the matrix has at least one app
    if: needs.generate-matrix.outputs.apps != '[]'

    # define the matrix â€” runs once for each app in the list
    strategy:
      matrix:
        app: ${{ fromJson(needs.generate-matrix.outputs.apps) }}

    steps:
      - uses: actions/checkout@v4

      # Set up a Node.js environment to run our script
      - name: Setup Node, npm, pnpm
        uses: "./.github/actions/setup-node-pnpm"

      - name: Build app
        run: |
          echo "Building app: ${{ matrix.app }}"
          pnpm turbo run build --filter=${{ matrix.app }}

      - name: Set Vercel token and project ID (Node.js)
        run: node ./scripts/vercel/set-env.js ${{ matrix.app }}
        env:
          # inject this envs for Node.js script
          VERCEL_TOKEN_DOCS_APP: ${{ secrets.VERCEL_TOKEN_DOCS_APP }}
          VERCEL_PROJECT_ID_DOCS_APP: ${{ secrets.VERCEL_PROJECT_ID_DOCS_APP }}
          VERCEL_TOKEN_MAIN_APP: ${{ secrets.VERCEL_TOKEN_MAIN_APP }}
          VERCEL_PROJECT_ID_MAIN_APP: ${{ secrets.VERCEL_PROJECT_ID_MAIN_APP }}
          VERCEL_ORG_ID_MAIN_APP: ${{ secrets.VERCEL_ORG_ID_MAIN_APP }}
          VERCEL_ORG_ID_DOCS_APP: ${{ secrets.VERCEL_ORG_ID_DOCS_APP }}

      - name: Install Vercel CLI
        run: npm install -g vercel

      # ðŸš€ Step 2: Deploy the app â€” customize this with your deployment command
      - name: Deploy to Vercel
        run: |
          echo "Deploying app: ${{ matrix.app }}"
          vercel deploy --prod --token $VERCEL_TOKEN --cwd apps/${{ matrix.app }}
